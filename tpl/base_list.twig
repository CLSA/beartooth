{##
 # base_list.twig
 # 
 # Generic list widget.
 # @author Patrick Emond <emondpd@mcmaster.ca>
 # @param boolean checkable Whether the list should allow items to be selected.
 # @param boolean viewable Whether the list should allow items to be viewed.
 # @param boolean addable Whether the list should allow items to be added.
 # @param boolean removable Whether the list should allow items to be removed.
 # @param int items_per_page The maximum number of items to show at once.
 # @param array columns An array of columns.  Every item in the array must have the following:
                     'id' => a unique id identifying the column
                     'name' => the name to display in in the column header
                     'sortable' => whether or not the list can be sorted by the column
                     'align' => right|center|left alignment (center is default)
 # @param array rows An array of items.  Every item in the array must have the following:
                     'id' => a unique identifying id
                     'columns' => an array of values for each column listed in the columns array
 # @param int number_of_items The total number of items (not visible, total).
 # @param int page The page to display.
 # @param string sort_column The column id to sort by (use an empty string for no sorting)
 # @param int sort_desc Whether to sort descending or ascending
 # @param int max_page The maximum number of pages possible given the total number of items.
 #}
{% extends "widget.twig" %}
{% block widget %}

<script type="text/javascript">

// make button icons
$( function() {
  $( "button.{{ widget.full }}_sortable" ).button( {
    text: true,
    icons: { primary: "ui-icon-triangle-2-n-s" }
  } );
  $( "button.{{ widget.full }}_sort" ).button( {
    text: true,
    icons: { primary: "ui-icon-triangle-1-s" }
  } );
  $( "button.{{ widget.full }}_sort_desc" ).button( {
    text: true,
    icons: { primary: "ui-icon-triangle-1-n" }
  } );
{% if viewable %}
  $( "button.{{ widget.full }}_view" ).button( {
    text: false,
    icons: { primary: "ui-icon-document" }
  } );
{% endif %}
{% if removable %}
  $( "button.{{ widget.full }}_remove" ).button( {
    text: false,
    icons: { primary: "ui-icon-closethick" }
  } );
{% endif %}
{% if addable %}
  $( "#{{ widget.full }}_add" ).button( {
    text: {{ rows|count ? 'false' : 'true' }},
    icons: { primary: "ui-icon-plusthick" }
  } );
{% endif %}
} );

// highlight the row the mouse is over
$( function() {
  $(".{{ widget.full }}_table tbody tr").mouseover( function() {
    $(this).addClass( "ui-widget-header" );
  } );
  $(".{{ widget.full }}_table tbody tr").mouseout( function() {
    $(this).removeClass( "ui-widget-header" );
  } );
} );

{% if viewable %}
// view buttons
$( function() {
  $( ".{{ widget.full }}_view" ).click( function() {
    var id_string = $(this).attr( 'id' );
    var id = parseInt( id_string.substring( id_string.lastIndexOf('_') + 1 ) );
    slot_load( get_slot( $(this) ),
               "{{ widget.subject }}_view",
               "{{ widget.subject }}_view",
               { "id": id } );
  } );
} );
{% endif %}

{% if removable %}
// remove buttons
$( function() {
  $( ".{{ widget.full }}_remove" ).click( function() {
    var id_string = $(this).attr( 'id' );
    var id = parseInt( id_string.substring( id_string.lastIndexOf('_') + 1 ) );
    var slot = get_slot( $(this) );
    
    {% if parent.exists %}
      var args = new Object();
      args.id = {{ parent.id }};
      args.remove_id = id;
      confirm_dialog(
        "Remove {{ widget.subject }}?",
        "Are you sure you want to remove the {{ widget.subject }} from the {{ parent.subject }}?",
        function() {
          send_action( "{{ parent.subject }}", "delete_{{ widget.subject }}", args );
          slot_refresh( slot );
        } );
    {% else %}
      confirm_dialog(
        "Delete {{ widget.subject }}?",
        "Are you sure you want to delete the {{ widget.subject }}?",
        function() {
          send_action( "{{ widget.subject }}", "delete", { "id": id } );
          slot_refresh( slot );
        } );
    {% endif %}
  } );
} );
{% endif %}
</script>

{% if addable %}
{% block add_button_js %}
<script type="text/javascript">
// add button
$( function() {
  $( "#{{ widget.full }}_add" ).click( function() {
    {% if parent.exists %}
      slot_load( get_slot( $(this) ),
                 "{{ parent.subject }}_add_{{ widget.subject }}",
                 "{{ parent.subject }}_add_{{ widget.subject }}",
                 { "id": {{ parent.id }} } );
    {% else %}
      slot_load( get_slot( $(this) ), "{{ widget.subject }}_add" );
    {% endif %}
  } );
} );
</script>
{% endblock add_button_js %}
{% endif %}

<script type="text/javascript">
{% if checkable %}
{# TODO: need to create a library for these kinds of cookie operations #}
$( function() {
  // get the checked id object from the cookies
  var json_checked_ids =
    $.cookie( "{{ widget.compound }}_checked_ids" );
  var checked_ids = undefined == json_checked_ids
                  ? new Object()
                  : jQuery.parseJSON( json_checked_ids );
    
  // on page load, set check button states based on its cookie
  $( ".{{ widget.full }}_check" ).each( function() {
    if( checked_ids[ $(this).attr( "id" ) ] ) $(this).attr( "checked", "checked" );
  } );

  // on change to a checkbox, set check button cookie
  $( ".{{ widget.full }}_check" ).change( function() {
    // add or remove the checkbox id to the object and replace the old cookie
    if( $(this).attr( "checked" ) ) checked_ids[ $(this).attr( "id" ) ] = true;
    else delete checked_ids[ $(this).attr( "id" ) ];
    $.cookie( "{{ widget.compound }}_checked_ids",
              JSON.stringify( checked_ids ) );
  } );

  // on clicking the "check all" button, check all (visible) checkboxes and set their cookies
  $( "#{{ widget.full }}_check_all" ).click( function() {
    $( ".{{ widget.full }}_check" ).each( function() {
      $(this).attr( "checked", true );
      checked_ids[ $(this).attr( "id" ) ] = true;
    } );

    // replace the old cookie
    $.cookie( "{{ widget.compound }}_checked_ids",
              JSON.stringify( checked_ids ) );
  } );

  // uncheck all (visible) checkboxes and set their cookies as well
  $( "#{{ widget.full }}_check_none" ).click( function() {
    $( ".{{ widget.full }}_check" ).each( function() {
      $(this).attr( "checked", false );
      delete checked_ids[ $(this).attr( "id" ) ];
    } );
    
    // replace the old cookie
    $.cookie( "{{ widget.compound }}_checked_ids",
              JSON.stringify( checked_ids ) );
  } );

  // uncheck all (visible) checkboxes and set their cookies as well
  $( "#{{ widget.full }}_check_invert" ).click( function() {
    $( ".{{ widget.full }}_check" ).each( function() {
      var old = $(this).attr( "checked" );
      $(this).attr( "checked", !old );
      if( !old ) checked_ids[ $(this).attr( "id" ) ] = true;
      else delete checked_ids[ $(this).attr( "id" ) ];
    } );

    // replace the old cookie
    $.cookie( "{{ widget.compound }}_checked_ids",
              JSON.stringify( checked_ids ) );
  } );

  // create button set
  $( "#{{ widget.full }}_check_none" ).button().parent().buttonset();
} );
{% endif %}

/**
 * Creates a modal dialog for contraining a column
 * 
 * @author Patrick Emond <emondpd@mcmaster.ca>
 * @param string column The name of the column to constrain.
 * TODO: constrain column not working, implement if needed
function constrain_dialog( column, on_confirm )
{
  $( "#constrain_dialog" ).dialog( {
    title: "Constraining " + column + " column",
    height: 200,
    width: 400,
    modal: true,
    buttons: {
      Ok: function() {
        var vars = new Object();
        vars.value = $( "#constrain_dialog_value" ).val();
        vars.compare = $( "#constrain_dialog_compare" ).val();
        on_confirm( vars );
        $(this).dialog( "close" );
      },
      Cancel: function() {
        $(this).dialog( "close" );
      }
    }
  } );
  
  // Hack to make sure the context menu doesn't show up
  $(this).bind( "contextmenu", function() { return false; }, false );
}
 */

// column sorting and contraining
$( function() {
  // handle left and right clicks on sortable headers
  $( "th.{{ widget.full }}_sortable" ).mousedown( function( event ) {
    if( 1 == event.which )
    { // left mouse button
      var args = new Object();
      args.sort_column = $(this).attr("id");
      args.sort_desc = "{{ sort_column }}" == $(this).attr("id") ? {{ sort_desc ? 0 : 1 }} : 0;
      slot_load( get_slot( $(this) ),
                 "{{ parent.exists ? parent.full : widget.full }}",
                 "{{ widget.full }}",
                 args );
    }
    /* TODO: constrain column not working, implement if needed
    else if( 3 == event.which )
    { // right mouse button
      var slot = get_slot( $(this) );
      var column = $(this).attr( "id" );
      constrain_dialog(
        $(this).attr( "id" ),
        function( vars ) {
          var args = new Object();
          var constrain_columns = new Object();
          constrain_columns[column] = vars.value.length ? vars : null;
          args.constrain_columns = constrain_columns;
          slot_load( slot,
                     "{{ parent.exists ? parent.full : widget.full }}",
                     "{{ widget.full }}",
                     args );
        }
      );
    }
    */
  } );
} );

{% if items_per_page < number_of_items %}
$( function() {
  // previous page button
  $( "#{{ widget.full }}_page_prev" ).click( function() {
    var args = new Object();
    args.page = {{ page - 1 }};
    slot_load( get_slot( $(this) ),
               "{{ parent.exists ? parent.full : widget.full }}",
               "{{ widget.full }}",
               args );
  } );

  // next page button
  $( "#{{ widget.full }}_page_next" ).click( function() {
    var args = new Object();
    args.page = {{ page + 1 }};
    slot_load( get_slot( $(this) ),
               "{{ parent.exists ? parent.full : widget.full }}",
               "{{ widget.full }}",
               args );
  } );

  // create a button set
  $( "#{{ widget.full }}_page_next" ).button().parent().buttonset();
} );
{% endif %}

</script>

{# TODO: constrain column not working, implement if needed
<div id="constrain_dialog">
  <p>Select how to constrain the column:</p>
  <form>
    <label for="constrain_dialog_value">Value</label>
    <select id="constrain_dialog_compare">
      <option selected>is</option>
      <option>is not</option>
    </select>
    <input type="text" name="constrain_dialog_value" id="constrain_dialog_value"
           class="text ui-widget-content ui-corner-all" />
  </form>
</div>
#}

<table class="{{ widget.full }}_table">
  {% set number_of_columns = 0 %}
  {% if rows|count %}
  <thead class="ui-widget-header">
    <tr>
      {% if checkable %}
      <th align="center"><div class="ui-icon ui-icon-check" style="padding:2px"></div></th>
      {% set number_of_columns = number_of_columns + 1 %}
      {% endif %}
      {% for column in columns %}
        {% if column.sortable|default(false) %}
          <th id="{{ column.id }}" class="{{ widget.full }}_sortable">
            {% if column.id == sort_column %}
            <button class="{{ widget.full }}_sort{{ sort_desc ? '_desc' : '' }}">
            {% else %}
            <button class="{{ widget.full }}_sortable">
            {% endif %}
              {{ column.heading }}
            </button>
          </th>
          {% set number_of_columns = number_of_columns + 1 %}
        {% else %}
          <th style="padding:0.5em">{{ column.heading }}</th>
          {% set number_of_columns = number_of_columns + 1 %}
        {% endif %}
      {% endfor %}
      {% if viewable %}
      <th width="1%"></th>
      {% set number_of_columns = number_of_columns + 1 %}
      {% endif %}
      {% if removable %}
      <th width="1%"></th>
      {% set number_of_columns = number_of_columns + 1 %}
      {% endif %}
  </thead>
  <tbody>
    {% for row in rows %}
    <tr>
      {% if checkable %}
      <td>
        <input type="checkbox"
               class="{{ widget.full }}_check"
               id="{{ widget.compound }}_check_{{ row.id }}" />
      </td>
      {% endif %}
      {% for column in columns %}
      <td {% if column.align|default(false) %}
            align="{{ column.align }}"
          {% endif %}
          style="font-weight: normal; padding-top:0.2em; padding-bottom:0.2em;">
        {{ row.columns[column.id] }}
      </td>
      {% endfor %}
      {% if viewable %}
      <td>
        <button class="{{ widget.full }}_view"
                id="{{ widget.full }}_view_{{ row.id }}">view</button>
      </td>
      {% endif %}
      {% if removable %}
      <td>
        <button class="{{ widget.full }}_remove"
                id="{{ widget.full }}_remove_{{ row.id }}">
          remove{% if parent.exists %} from {{ parent.subject }}{% endif %}
        </button>
      </td>
      {% endif %}
    </tr>
    {% endfor %}
  </tbody>
  {% endif %}
  <tfoot class="ui-widget-header">
    <tr>
      <th colspan="{{ addable ? number_of_columns - 1 : 0 }}">
        {% if checkable %}
        <span>
          Check boxes:
          <button style="width:80px" id="{{ widget.full }}_check_all">all</button>
          <button style="width:80px" id="{{ widget.full }}_check_none">none</button>
          <button style="width:80px" id="{{ widget.full }}_check_invert">invert</button>
        </span>
        <span style="margin-left:20px"></span>
        {% endif %}
        {% if rows|count %}
        {% set item_from = ( page - 1 ) * items_per_page + 1 %}
        {% set item_to = item_from + rows|count - 1 %}
        Viewing: {{ item_from }} to {{ item_to }} of {{ number_of_items }}
        {% else %}
        No {{ widget.subjects }} found.
        {% endif %}
        {% if items_per_page < number_of_items %}
        <span style="margin-left:20px"></span>
        <span>
          Page:
          <button style="width:80px"
                  id="{{ widget.full }}_page_prev"
                  {{ 1 == page ? 'disabled' : '' }}>prev</button>
          <button style="width:80px"
                  id="{{ widget.full }}_page_next"
                  {{ max_page == page ? 'disabled' : '' }}>next</button>
        </span>
        {% endif %}
      </th>
      {% if addable %}
      <th><button id="{{ widget.full }}_add">
        add {{ widget.subject }}{% if parent.exists %} to {{ parent.subject }}{% endif %}
      </button></th>
      {% endif %}
    </tr>
  </tfoot>
</table>
{% endblock %}
