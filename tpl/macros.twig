{##
 # macros.twig
 # 
 # Contains a list of twig macros.
 #}

{##
 # Displays a set of confirm buttons.
 # For every string in the buttons array a button by that name will be created with their
 # id set to {{ name }}_{{ button name }}. Button names should always be lower case.
 # @author Patrick Emond <emondpd@mcmaster.ca>
 # @param string name What to name the widget (used for namespacing)
 # @param array(string) buttons The names of buttons to add to the set.
 # @param string back What to label the button which will return to the previous widget.
                 (leaving this blank will omit the back button).
 # @param string align How to align the buttons (default is right)
 # @param boolean spacer Whether to include spacing before including the list.
 #}
{% macro confirm_buttons( slot, name, buttons, back, align, spacer ) %}
  <script type="text/javascript">
  $( function() {
    // back button
    $( "#{{ name }}_back" ).click( function() {
      slot_prev( {{ slot }} );
    } );
  
    // create a button set
    $( "#{{ name }}_confirm_buttons" ).buttonset();
  } );
  </script>
  <div id="{{ name }}_confirm_buttons"
       {{ spacer|default(false) ? 'class="spacer" ' : ''}}
       style="text-align: {{ align|default('left') }};">

  {% for button in buttons %}
    <button id="{{ name }}_{{ button }}" style="width:100px">{{ button|capitalize }}</button>
  {% endfor %}
  
  {% if back|default(false) %}
    <button id="{{ name }}_back" style="width:100px">{{ back }}</button>
  {% endif %}
  </div>
{% endmacro %}

{##
 # Includes a list widget, if list is set.
 # @author Patrick Emond <emondpd@mcmaster.ca>
 # @param string subject The list's subject.
 # @param array list The list's arguments.
 # @param boolean spacer Whether to include spacing before including the list.
 #}
{% macro include_list( subject, list, spacer ) %}
  {% if list|default(false) %}
    {% if spacer|default(false) %}<div class="spacer" />{% endif %}
    {% include [ subject, "list.twig" ]|join("_") with list %}
  {% endif %}
{% endmacro %}

{##
 # This widget displays an icon/button which pops up a list of notes.
 # @author Patrick Emond <emondpd@mcmaster.ca>
 # @param string name What to name the widget (used for namespacing)
 # @param array note_list An array of notes
 #}
{% macro notes_widget( name, note_list, on_call ) %}
  
  <script type="text/javascript">
  $( function() {
    // identify a note by changing classes on mouse over/out
    $( "#{{ name }}_notes" ).mouseover( function() {
      $(this).removeClass( "padded" );
      $(this).addClass( "ui-widget-content" );
    } )
    $( "#{{ name }}_notes" ).mouseout( function() {
      $(this).removeClass( "ui-widget-content" );
      $(this).addClass( "padded" );
    } )

    // note click callback
    $( "#{{ name }}_notes" ).click( function() {
      var args = new Object();
      // TODO: implement: slot_load( "{{ name }}_notes", "note_display", "", args );
      $( "#{{ name }}_notes_slot" ).dialog( {
        title: "Notes",
        modal: true,
        width: 500,
        height: 600
      } );
    } );
  } );
  </script>
  
  <div id="{{ name }}_notes" class="note padded">
    <div class="note ui-icon ui-icon-comment" />
    {% if note_list|count %}
    <div class="note" style="font-size:0.6em; position:relative; bottom:2px; right:2px">
      {{ note_list|count }}
    </div>
    {% endif %}
  </div>
  <div id="{{ name }}_notes_slot" />

{% endmacro %}

{##
 # Given a contact list this creates a widget for dialing phone numbers in that list.
 # @author Patrick Emond <emondpd@mcmaster.ca>
 # @param string name What to name the widget (used for namespacing)
 # @param array contact_list An array of contacts where the key is a contact_id and the value
 #              is the display text.
 # @param array status_list An array of all possible status results for after a call has been
 #              completed.
 # @param bool on_call Whether the client is currently in a call.
 #}
{% macro dial_contact_widget( name, contact_list, status_list, on_call ) %}
  
  <script type="text/javascript">
  function {{ name }}__update_interface( on_call ) {
    // call button
    $( "#{{ name }}__call" ).button( {
      text: true,
      label: on_call ? "End Call" : "Call",
      icons: { primary: "ui-icon-person" }
    } );
    
    {% if status_list %}
    // switch out contact and status lists
    $( "#{{ name }}__parameter" ).children().remove().end().append(
      on_call
    {% for status in status_list %}
      {{ loop.first ? '?' : '+' }} '<option value="{{ status }}">{{ status }}</option>'
    {% endfor %}
    {% for id, contact in contact_list %}
      {{ loop.first ? ':' : '+' }} '<option value="{{ id }}">{{ contact }}</option>'
    {% endfor %}
    );
    {% else %}

    // enable/disable the contact select element
    $( "#{{ name }}__parameter" ).attr( "disabled", on_call );

    {% endif %}
  }

  $( function() {
    // initialize the interface
    var on_call = {{ on_call ? "true" : "false" }};
    {{ name }}__update_interface( on_call );

    // call button
    $( "#{{ name }}__call" ).click( function() {
      var args = new Object();
      if( !on_call ) {
        args.contact_id = $( "#{{ name }}__parameter" ).val();
        if( send_action( "phone_call", "begin", args ) ) {
          on_call = true;
          // update the interface
          {{ name }}__update_interface( on_call );
        }
      }
      else {
        args.status = $( "#{{ name }}__parameter" ).val();
        if( send_action( "phone_call", "end", args ) ) {
          on_call = false;
          // update the interface
          {{ name }}__update_interface( on_call );
        }
      }

    } );
  } );
  </script>
  
  {% if contact_list %}
    
    <select class="ui-state-default" id="{{ name }}__parameter">
    {% for id, contact in contact_list %}
      <option value="{{ id }}">{{ contact }}</option>
    {% endfor %}
    </select>
    <button style="width:125px" id="{{ name }}__call"></button>

  {% else %}
    
    (no numbers to dial)
    <button style="width:125px" id="{{ name }}__call" disabled>Call</button>

  {% endif %}

{% endmacro %}
